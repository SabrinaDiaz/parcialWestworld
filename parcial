//  A - PERSONAJES

class Personaje {
	var energia
	var escenarioConocido // es un escenario
	
	method nivelDeFelicidad() //cada personaje lo maneja distinto
	
	method nivelDeRebeldia() = 1 / self.nivelDeFelicidad()
	
	method conocesEsteEscenario(unEscenario) = escenarioConocido.equals(unEscenario)
	
	method conocerEscenario(escenario) {
		if(self.conocesEsteEscenario(escenario)){
		energia -= escenario.nivelDeFama() // perder energia tanta energia como fama tenga el escenario
		}
	}
	
	method esRebelde() = self.nivelDeRebeldia() > 10
	
	method morite() { energia = 0} //cada personaje se muere de manera distinta
	
	method interactueConOtro(personaje) { energia /= 2 }
}

const cantina = new Escenario (categoria = bajoCosto )
const recuerdoDolores = new Recuerdo(descripcion = "conocio al amor de su vida" , escenario = cantina)
//const dolores = new Anfitrion(energia = 90, velocidad = 0.8, recuerdos = [recuerdoDolores])
//const william = new Huesped ( minutos = 3600, energia = 70 , mejoresAmigos = [dolores])

class Huesped inherits Personaje{
	var minutos
	var mejoresAmigos = []
	
	override method nivelDeFelicidad() = minutos * self.felicidadAmigos()
	
	method felicidadAmigos() = mejoresAmigos.sum({amigo => amigo.nivelDeFelicidad()})
	
	override method morite() {
		super()
		minutos = 0
	}
	
/*	a los huÃ©spedes se les reduce el tiempo que les queda en el parque en 10 minutos.
Si el escenario a conocer es de lujo debe aumentar su cantidad de visitas en 1.
	*/
	override method conocerEscenario(escenario){
		super(escenario)
		minutos -= 10
		if(escenario.categoria().equals(lujo)){
			escenario.aumentarVisitas()
		}
	}
	
	override method interactueConOtro(personaje) {
		super(personaje)
		 mejoresAmigos.add(personaje)
	}
}

class Anfitrion inherits Personaje{
	var velocidad
	var recuerdos = []
	
	override method nivelDeFelicidad() = energia / velocidad
	
	override method morite() { 
		super()
		velocidad = 0
	}
	
	override method conocerEscenario(unEscenario){
		super(unEscenario)
		recuerdos.add(new Recuerdo(descripcion = "gane un recuerdo" , escenario = unEscenario) )
	}
	override method interactueConOtro(personaje) {
		super(personaje)
		 velocidad /= 2
	}
}

class Recuerdo {
	var descripcion
	var escenario
	
	method emotividad() = descripcion.size() * escenario.nivelDeFama()
}

// B - ESCENARIOS

class Escenario{
	var property categoria //se refiera a si es de bajo presupuesto, lujo o estandar
	var base = 100
	
	method nivelDeFama() = base + categoria.extra()
	
	method evolucionate(){
		categoria.evoluciona(self)
	}
}

//se lo declara como objeto porque el escenario puede evolucionar por ende cambiar de objeto

//INTERFACE
object bajoCosto {
	var property zona = "caballito"
	
	 method evoluciona(escenario) {
	 	 escenario.categoria(estandar)
	}
	 method extra() = zona.size()
}

object estandar{
	
	method evoluciona(escenario) = escenario.categoria(lujo)
	
	 method extra() = 10
}

object lujo {
	var visitas
	
	 method evoluciona(escenario) {  self.error("este tipo de escenario no puede evolucionar") }
	
	 method extra() = visitas
	
	method aumentarVisitas() { visitas += 1 }
}

// C - TRAMAS

class Trama{
	var property personajes = []
	var escenarioPrincipal
	
	method complejidadTrama() = escenarioPrincipal.nivelDeFama() / self.personajeMasFeliz()
	
	method personajeMasFeliz() = personajes.max({personaje => personaje.nivelDeFelicidad()}) 
	
	method renovar(){
		escenarioPrincipal.evoluciona(escenarioPrincipal)
		personajes.forEach({personaje => if(personaje.esRebelde()) personaje.morite()})
	}
	method esPicante(){
		return personajes.all({personaje => personaje.esRebelde()})
	}
	method cruzarTramas(trama){
		//le digo a los personajes que conozcan el escenario de la trama que le estoy pasando
		personajes.forEach({personaje => personaje.conocerEscenario(trama.escenarioPrincipal())})
		
		//le digo a mis personajes que interactuen con cualquier personaje de la otra trama
		personajes.forEach({personaje => personaje.interactueConOtro(trama.personajes().anyOne())})
	}
	
}
